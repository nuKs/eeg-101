apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */
project.ext.react = [
   // the entry file for bundle generation
   entryFile: "bimslab/index.android.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

android {
    compileSdkVersion 26

    defaultConfig {
        applicationId "com.eeg_project"
        minSdkVersion 21 // required because of multiDexEnabled
        targetSdkVersion 25
        versionCode 26
        versionName "2.6"
        multiDexEnabled true // Fix issue "Cause: method ID not in [0, 0xffff]: 65536"
        ndk {
            abiFilters "armeabi-v7a"
        }
        signingConfigs {
            release {
                if (project.hasProperty('EEG101_RELEASE_STORE_FILE')) {
                 storeFile file(EEG101_RELEASE_STORE_FILE)
                  storePassword EEG101_RELEASE_STORE_PASSWORD
                   keyAlias EEG101_RELEASE_KEY_ALIAS
                    keyPassword EEG101_RELEASE_KEY_PASSWORD }
            }
        }

        //AWARE core sensors SyncAdapters
        resValue "string", "provider_accelerometer", android.defaultConfig.applicationId + ".provider.accelerometer"
        resValue "string", "provider_applications", android.defaultConfig.applicationId + ".provider.applications"
        resValue "string", "provider_aware", android.defaultConfig.applicationId + ".provider.aware"
        resValue "string", "provider_barometer", android.defaultConfig.applicationId + ".provider.barometer"
        resValue "string", "provider_battery", android.defaultConfig.applicationId + ".provider.battery"
        resValue "string", "provider_bluetooth", android.defaultConfig.applicationId + ".provider.bluetooth"
        resValue "string", "provider_communication", android.defaultConfig.applicationId + ".provider.communication"
        resValue "string", "provider_esm", android.defaultConfig.applicationId + ".provider.esm"
        resValue "string", "provider_gravity", android.defaultConfig.applicationId + ".provider.gravity"
        resValue "string", "provider_gyroscope", android.defaultConfig.applicationId + ".provider.gyroscope"
        resValue "string", "provider_installations", android.defaultConfig.applicationId + ".provider.installations"
        resValue "string", "provider_keyboard", android.defaultConfig.applicationId + ".provider.keyboard"
        resValue "string", "provider_light", android.defaultConfig.applicationId + ".provider.light"
        resValue "string", "provider_linear_accelerometer", android.defaultConfig.applicationId + ".provider.accelerometer.linear"
        resValue "string", "provider_locations", android.defaultConfig.applicationId + ".provider.locations"
        resValue "string", "provider_magnetometer", android.defaultConfig.applicationId + ".provider.magnetometer"
        resValue "string", "provider_network", android.defaultConfig.applicationId + ".provider.network"
        resValue "string", "provider_processor", android.defaultConfig.applicationId + ".provider.processor"
        resValue "string", "provider_proximity", android.defaultConfig.applicationId + ".provider.proximity"
        resValue "string", "provider_rotation", android.defaultConfig.applicationId + ".provider.rotation"
        resValue "string", "provider_screen", android.defaultConfig.applicationId + ".provider.screen"
        resValue "string", "provider_significant", android.defaultConfig.applicationId + ".provider.significant"
        resValue "string", "provider_telephony", android.defaultConfig.applicationId + ".provider.telephony"
        resValue "string", "provider_temperature", android.defaultConfig.applicationId + ".provider.temperature"
        resValue "string", "provider_timezones", android.defaultConfig.applicationId + ".provider.timezone"
        resValue "string", "provider_traffic", android.defaultConfig.applicationId + ".provider.traffic"
        resValue "string", "provider_wifi", android.defaultConfig.applicationId + ".provider.wifi"

        //Bundled plugins provider authority overrides
        resValue "string", "provider_conversations", android.defaultConfig.applicationId + ".provider.audio_final"
        resValue "string", "provider_google_activity_recognition", android.defaultConfig.applicationId + ".provider.gar"
        resValue "string", "provider_google_fused", android.defaultConfig.applicationId + ".provider.geofences"
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            debuggable true
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}


project.ext {
    aware_libs = (System.getenv("aware_libs") as String ?: "master-SNAPSHOT")
}

dependencies {
    compile project(':react-native-video')
    compile project(':react-native-vector-icons')
    compile project(':lottie-react-native')
    compile project(':react-native-i18n')
    compile project(':react-native-torch')
    compile project(':react-native-svg')
	compile project(':react-native-i18n')
    compile fileTree(dir: "libs", include: ["*.jar"])
    // Animated Gif support
    compile 'com.facebook.fresco:fresco:1.3.0'
    compile 'com.facebook.fresco:animated-gif:1.3.0'
    compile "com.android.support:appcompat-v7:26.1.0"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile 'org.apache.commons:commons-lang3:3.4'
    compile files('libs/libmuse_android.jar')
    compile "com.androidplot:androidplot-core:1.5.1"
    compile group: 'com.github.wendykierp', name: 'JTransforms', version: '3.1'


    //adding AWARE now as a dependency
    api "com.github.denzilferreira:aware-client:master-SNAPSHOT" //set by the project build.gradle/Jenkins

    //we add more plugins we want bundled after this. Let's compile now.
    //UCLA needs: activity recognition, fused location plugins, conversations
    /*
    api "com.github.denzilferreira:com.aware.plugin.google.activity_recognition:$aware_libs"
    api "com.github.denzilferreira:com.aware.plugin.google.fused_location:$aware_libs"
    api "com.github.denzilferreira:com.aware.plugin.studentlife.audio_final:$aware_libs"
    api "com.github.denzilferreira:com.aware.plugin.esm.scheduler:$aware_libs"
    */
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
